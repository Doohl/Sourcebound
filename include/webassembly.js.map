{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src"
  ],
  "names": [],
  "mappings
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "\"use strict\";\r\n\r\nif (typeof window !== \"undefined\" && window)\r\n    window.webassembly = exports;\r\n\r\n// Common aliases\r\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\r\n\r\n/**\r\n * Describes a module instance as returned by {@link load}.\r\n * @interface IModule\r\n * @property {Object.<string,*>} exports Exports\r\n * @property {Object.<string,*>} imports Imports\r\n * @property {IMemory} memory Memory\r\n * @property {Object.<string,*>} env Environment\r\n */\r\n\r\n/**\r\n * Describes a module memory instance.\r\n * @interface IMemory\r\n * @property {ArrayBuffer} buffer Underlying buffer\r\n * @property {number} initial=1 Specified initial amount of memory in 64k pages\r\n * @property {number} [maximum] If specified, maximum amount of memory in 64k pages\r\n * @property {Uint8Array} U8 Byte-level view\r\n * @property {Uint32Array} U32 Aligned unsigned 32-bit integer view\r\n * @property {Int32Array} S32 Aligned signed 32-bit integer view\r\n * @property {Float32Array} F32 Aligned 32-bit float view\r\n * @property {Float64Array} F64 Aligned 64-bit double view\r\n * @property {GetInt} getInt Reads a 32-bit signed integer starting at the specified memory offset (aligned to 4 bytes)\r\n * @property {GetUint} getUint Reads a 32-bit unsigned integer starting at the specified memory offset (aligned to 4 bytes)\r\n * @property {GetFloat} getFloat Reads a 32-bit float starting at the specified memory offset (aligned to 4 bytes)\r\n * @property {GetDouble} getDouble Reads a 64-bit double starting at the specified memory offset (aligned to 8 bytes)\r\n * @property {GetString} getString Reads the (zero-terminated, exclusive) string starting at the specified memory offset (aligned to 4 bytes)\r\n */\r\n\r\n/**\r\n * Loads a WebAssembly.\r\n * @param {string} file File name\r\n * @param {LoadOptions} [options] Options\r\n * @returns {Promise.<IModule>} Promise resolving to the instantiated module\r\n */\r\nfunction load(file, options) {\r\n\r\n    /**\r\n     * Options as used by {@link load}.\r\n     * @interface LoadOptions\r\n     * @property {number} [initialMemory=1] Initial memory in pages of 64k\r\n     * @property {number} [maximumMemory] Maximum memory in pages of 64k\r\n     * @property {Object.<string,*>} [imports] Imports\r\n     */\r\n\r\n    options || (options = {});\r\n\r\n    var imports = options.imports || {};\r\n\r\n    // Initialize memory\r\n\r\n    var memory = imports.memory;\r\n    if (!memory) {\r\n        var opts = { initial: options.initialMemory || 1 };\r\n        if (options.maximumMemory)\r\n            opts.maximum = options.maximumMemory;\r\n        memory = new WebAssembly.Memory(opts);\r\n        memory.initial = options.initialMemory || 1;\r\n        memory.maximum = options.maximumMemory;\r\n    }\r\n\r\n    var table = imports.table;\r\n    if (!table)\r\n        table = new WebAssembly.Table({ initial: 0, element: \"anyfunc\" });\r\n\r\n    function grow() {\r\n        var buf = memory.buffer;\r\n        memory.U8  = new Uint8Array  (buf);\r\n        memory.S32 = new Int32Array  (buf);\r\n        memory.U32 = new Uint32Array (buf);\r\n        memory.F32 = new Float32Array(buf);\r\n        memory.F64 = new Float64Array(buf);\r\n    }\r\n\r\n    grow();\r\n\r\n    // Add utilty to memory\r\n\r\n    /**\r\n     * Reads a 32-bit signed integer starting at the specified memory offset.\r\n     * @typedef GetInt\r\n     * @function\r\n     * @param {number} ptr Memory offset\r\n     * @returns {number} Signed 32-bit integer value\r\n     */\r\n    function getInt(ptr) {\r\n        return memory.S32[ptr >> 2];\r\n    }\r\n\r\n    memory.getInt = getInt;\r\n\r\n    /**\r\n     * Reads a 32-bit unsigned integer starting at the specified memory offset.\r\n     * @typedef GetUint\r\n     * @function\r\n     * @param {number} ptr Memory offset\r\n     * @returns {number} Unsigned 32-bit integer value\r\n     */\r\n    function getUint(ptr) {\r\n        return memory.U32[ptr >> 2];\r\n    }\r\n\r\n    memory.getUint = getUint;\r\n\r\n    /**\r\n     * Reads a 32-bit float starting at the specified memory offset.\r\n     * @typedef GetFloat\r\n     * @function\r\n     * @param {number} ptr Memory offset\r\n     * @returns {number} 32-bit float value\r\n     */\r\n    function getFloat(ptr) {\r\n        return memory.F32[ptr >> 2];\r\n    }\r\n\r\n    memory.getFloat = getFloat;\r\n\r\n    /**\r\n     * Reads a 64-bit double starting at the specified memory offset.\r\n     * @typedef GetDouble\r\n     * @function\r\n     * @param {number} ptr Memory offset\r\n     * @returns {number} 64-bit float value\r\n     */\r\n    function getDouble(ptr) {\r\n        return memory.F64[ptr >> 3];\r\n    }\r\n\r\n    memory.getDouble = getDouble;\r\n\r\n    /**\r\n     * Reads a (zero-terminated, exclusive) string starting at the specified memory offset.\r\n     * @typedef GetString\r\n     * @function\r\n     * @param {number} ptr Memory offset\r\n     * @returns {string} String value\r\n     */\r\n    function getString(ptr) {\r\n        var start = (ptr >>>= 0);\r\n        while (memory.U8[ptr++]);\r\n        getString.bytes = ptr - start;\r\n        return String.fromCharCode.apply(null, memory.U8.subarray(start, ptr - 1));\r\n    }\r\n\r\n    memory.getString = getString;\r\n\r\n    // Initialize environment\r\n\r\n    var env = {};\r\n\r\n    env.memoryBase = imports.memoryBase || 0;\r\n    env.memory = memory;\r\n    env.tableBase = imports.tableBase || 0;\r\n    env.table = table;\r\n\r\n    // Add console to environment\r\n\r\n    function sprintf(ptr, base) {\r\n        var s = getString(ptr);\r\n        return base\r\n            ? s.replace(/%([dfisu]|lf)/g, ($0, $1) => {\r\n                var val;\r\n                return base +=\r\n                    $1 === \"u\"  ? (val = getUint(base), 4)\r\n                  : $1 === \"f\"  ? (val = getFloat(base), 4)\r\n                  : $1 === \"s\"  ? (val = getString(getUint(base)), 4)\r\n                  : $1 === \"lf\" ? (val = getDouble(base), 8)\r\n                  :               (val = getInt(base), 4)\r\n                  , val;\r\n            })\r\n            : s;\r\n    }\r\n\r\n    getOwnPropertyNames(console).forEach(key => {\r\n        if (typeof console[key] === \"function\") // eslint-disable-line no-console\r\n            env[\"console_\" + key] = (ptr, base) => {\r\n                console[key](sprintf(ptr, base)); // eslint-disable-line no-console\r\n            };\r\n    });\r\n\r\n    // Add Math to environment\r\n\r\n    getOwnPropertyNames(Math).forEach(key => {\r\n        if (typeof Math[key] === \"function\")\r\n            env[\"Math_\" + key] = Math[key];\r\n    });\r\n\r\n    // Add imports to environment\r\n\r\n    Object.keys(imports).forEach(key => env[key] = imports[key]);\r\n\r\n    // Add default exit listeners if not explicitly imported\r\n\r\n    if (!env._abort)\r\n        env._abort = errno => { throw Error(\"abnormal abort in \" + file + \": \" + errno); };\r\n    if (!env._exit)\r\n        env._exit = code => { if (code) throw Error(\"abnormal exit in \" + file + \": \" + code); }\r\n\r\n    // Finally, fetch the assembly and instantiate it\r\n\r\n    env._grow = grow;\r\n\r\n    return (typeof fetch === \"function\" && fetch || fetch_node)(file)\r\n        .then(result => result.arrayBuffer())\r\n        .then(buffer => WebAssembly.instantiate(buffer, { env: env }))\r\n        .then(module => {\r\n            var instance = module.instance;\r\n            instance.imports = imports;\r\n            instance.memory = memory;\r\n            instance.env = env;\r\n            return instance;\r\n        });\r\n}\r\n\r\nexports.load = load;\r\n\r\n// Internal fetch API polyfill for node that doesn't trigger webpack\r\nvar fs;\r\nfunction fetch_node(file) {\r\n    return new Promise((resolve, reject) => (fs || (fs = eval(\"equire\".replace(/^/, \"r\"))(\"fs\"))).readFile(file, (err, data) => err ? reject(err) : resolve({ arrayBuffer: () => data })));\r\n}\r\n"
  ]
}